var d=process.env.AZION_ENV==="stage"?"https://stage-api.azion.net/domains":"https://api.azionapi.net/domains",p=(s,i)=>{let n;return s.forEach(e=>{i[e]&&(n=Array.isArray(i[e])?i[e].join(", "):i[e])}),n??JSON.stringify(i)},u=s=>({Authorization:`Token ${s}`,Accept:"application/json; version=3","Content-Type":"application/json"}),g=async(s,i,{debug:n})=>{try{let e={name:i.name,cnames:i?.cnames??[],cname_access_only:i?.cnameAccessOnly??!1,digital_certificate_id:i?.digitalCertificateId??void 0,edge_application_id:i.edgeApplicationId,edge_firewall_id:i?.edgeFirewallId??void 0,is_active:!0};if(i?.mtls){if(i.mtls.verification!=="enforce"&&i.mtls.verification!=="permissive")throw new Error("mtls.verification must be enforce or permissive");e={...e,is_mtls_enabled:!0,mtls_verification:i.mtls.verification,mtls_trusted_ca_certificate_id:i.mtls.trustedCaCertificateId,crl_list:i.mtls.crlList}}let r=await(await fetch(d,{method:"POST",headers:u(s),body:JSON.stringify(e)})).json();return n&&console.log("Response Post Domains",r),r.results?r:{error:{message:p(["detail","edge_application_id"],r),operation:"create domain"}}}catch(e){throw n&&console.error("Error creating Domain:",e),e}},A=async(s,i,n)=>{try{let{page_size:e=10,page:t=1}=n||{},r=new URLSearchParams({page_size:String(e),page:String(t)}),m=await(await fetch(`${d}?${r.toString()}`,{method:"GET",headers:u(s)})).json();return i?.debug&&console.log("Response List Domains",m),m.results?{...m,results:m.results.map(o=>({id:o.id,name:o.name,url:o.domain_name,environment:o.environment,active:o.is_active,edgeApplicationId:o.edge_application_id,cnameAccessOnly:o.cname_access_only,digitalCertificateId:o.digital_certificate_id,edgeFirewallId:o?.edge_firewall_id,cnames:o.cnames,mtls:o.is_mtls_enabled?{verification:o.mtls_verification,trustedCaCertificateId:o.mtls_trusted_ca_certificate_id,crlList:o.crl_list}:void 0}))}:{error:{message:p(["detail","edge_application_id"],m),operation:"list domains"}}}catch(e){throw i?.debug&&console.error("Error listing Domains:",e),e}},_=async(s,i,n)=>{try{let t=await(await fetch(`${d}/${i}`,{method:"GET",headers:u(s)})).json();return n?.debug&&console.log("Response Get Domain",t),t.results?t:{error:{message:p(["detail","edge_application_id"],t),operation:"get domain"}}}catch(e){throw n?.debug&&console.error("Error getting Domain:",e),e}},f=async(s,i,n,e)=>{try{let t={name:n.name,cnames:n?.cnames??[],cname_access_only:n?.cnameAccessOnly??!1,digital_certificate_id:n?.digitalCertificateId??void 0,edge_application_id:n.edgeApplicationId,edge_firewall_id:n?.edgeFirewallId??void 0,is_active:n.active??!0};if(n?.mtls){if(n.mtls.verification!=="enforce"&&n.mtls.verification!=="permissive")throw new Error("mtls.verification must be enforce or permissive");t={...t,is_mtls_enabled:!0,mtls_verification:n.mtls.verification,mtls_trusted_ca_certificate_id:n.mtls.trustedCaCertificateId,crl_list:n.mtls.crlList}}let c=await(await fetch(`${d}/${i}`,{method:"PUT",headers:u(s),body:JSON.stringify(t)})).json();return e?.debug&&console.log("Response Put Domains",c),c.results?c:{error:{message:p(["detail","edge_application_id"],c),operation:"update domain"}}}catch(t){throw e?.debug&&console.error("Error updating Domain:",t),t}},D=async(s,i,n)=>{try{let e=await fetch(`${d}/${i}`,{method:"DELETE",headers:u(s)});if(e.status!==204){let t=await e.json();return{error:{message:p(["detail","edge_application_id"],t),operation:"delete domain"}}}return n?.debug&&console.log("Response Delete Domain"),{results:void 0}}catch(e){throw n?.debug&&console.error("Error deleting Domain:",e),e}};var a=s=>s??process.env.AZION_TOKEN??"",l=s=>{let i=process.env.AZION_DEBUG&&process.env.AZION_DEBUG==="true";return typeof s>"u"||s===null?!!i:!!s};var z=async(s,i,n)=>{if(i.name===void 0||i.edgeApplicationId===void 0)return{error:{message:"Domain name and Edge Application ID are required",operation:"create domain"}};let{results:e,error:t}=await g(a(s),i,{...n,debug:l(n?.debug)});return e&&e.id?{data:{state:"executed",id:e.id,name:e?.name,url:e?.domain_name,environment:e?.environment,active:e?.is_active}}:{error:t}},b=async(s,i,n)=>{let e=await A(a(s),n,i);return e.results?{data:{count:e.count??e.results.length,state:"executed",results:e.results,pages:e.total_pages??1}}:{error:e.error}},C=async(s,i,n)=>{let{results:e,error:t}=await _(a(s),i,{...n,debug:l(n?.debug)});return e&&e.id?{data:{state:"executed",id:e.id,name:e?.name,url:e?.domain_name,environment:e?.environment,active:e?.is_active,cnameAccessOnly:e?.cname_access_only,digitalCertificateId:e?.digital_certificate_id,cnames:e?.cnames,edgeApplicationId:e?.edge_application_id,edgeFirewallId:e?.edge_firewall_id,mtls:e?.is_mtls_enabled?{verification:e.mtls_verification,trustedCaCertificateId:e.mtls_trusted_ca_certificate_id,crlList:e.crl_list}:void 0}}:{error:t}},y=async(s,i,n,e)=>{if(n?.edgeApplicationId===void 0)return{error:{message:"Edge Application ID is required",operation:"update domain"}};let t=await f(a(s),i,n,{...e,debug:l(e?.debug)});return t?.results?.id?{data:{state:"executed",name:t?.results?.name,id:t?.results?.id,environment:t?.results?.environment,cnames:t?.results?.cnames,url:t?.results?.domain_name,active:t?.results?.is_active,cnameAccessOnly:t?.results?.cname_access_only,digitalCertificateId:t?.results?.digital_certificate_id,edgeApplicationId:t?.results?.edge_application_id,edgeFirewallId:t?.results?.edge_firewall_id,mtls:t?.results?.is_mtls_enabled?{verification:t?.results.mtls_verification,trustedCaCertificateId:t?.results.mtls_trusted_ca_certificate_id,crlList:t?.results.crl_list}:void 0}}:{error:t?.error}},v=async(s,i,n)=>{let{error:e}=await D(a(s),i,{...n,debug:l(n?.debug)});return e?{error:e}:{data:{state:"executed",id:i}}},P=async(s,i)=>z(a(),s,i),E=async(s,i)=>b(a(),i,s),L=async(s,i)=>C(a(),s,i),S=async(s,i,n)=>y(a(),s,i,n),T=async(s,i)=>v(a(),s,i),h=s=>{let i=a(s?.token),n=l(s?.options?.debug);return{createDomain:(t,r)=>z(i,t,{...r,debug:n}),getDomains:(t,r)=>b(i,r,{...t,debug:n}),getDomain:(t,r)=>C(i,t,{...r,debug:n}),updateDomain:(t,r,c)=>y(i,t,r,{...c,debug:n}),deleteDomain:(t,r)=>v(i,t,{...r,debug:n})}};var x=h;export{h as createClient,P as createDomain,x as default,T as deleteDomain,L as getDomain,E as getDomains,S as updateDomain};
