"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _nullishCoalesce(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } } function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; } var _class;var d=(a,e)=>_optionalChain([a, 'optionalAccess', _ => _.length])>e?a.slice(0,e):a;var A=process.env.AZION_ENV==="stage"?"https://stage-api.azion.com/v4/edge_sql/databases":"https://api.azion.com/v4/edge_sql/databases",y=(a,e,r)=>{let s={message:"Error unknown",operation:r};return a.forEach(t=>{e[t]&&(s={message:Array.isArray(e[t])?e[t].join(", "):e[t],operation:r})}),s},O=async(a,e,r)=>{try{let t=await(await fetch(A,{method:"POST",headers:{Authorization:`Token ${a}`,"Content-Type":"application/json"},body:JSON.stringify({name:e})})).json();return t.state?(r&&console.log("Response Post Database",JSON.stringify(t)),{state:t.state,data:{clientId:t.data.client_id,createdAt:t.data.created_at,deletedAt:t.data.deleted_at,id:t.data.id,isActive:t.data.is_active,name:t.data.name,status:t.data.status,updatedAt:t.data.updated_at}}):(t.error=y(["detail"],t,"post database"),{error:_nullishCoalesce(t.error, () => (JSON.stringify(t)))})}catch(s){throw r&&console.error("Error creating EdgeDB:",s),s}},C=async(a,e,r)=>{try{let s=await fetch(`${A}/${e}`,{method:"DELETE",headers:{Authorization:`Token ${a}`}});r&&console.log("Response Delete Database:",s);let t=await s.json();return t.state?{state:t.state,data:{id:e}}:(t.error=y(["detail"],t,"delete database"),{error:_nullishCoalesce(t.error, () => (JSON.stringify(t)))})}catch(s){throw r&&console.error("Error deleting EdgeDB:",s),s}},T=async(a,e,r,s)=>{try{let n=await(await fetch(`${A}/${e}/query`,{method:"POST",headers:{Authorization:`Token ${a}`,"Content-Type":"application/json"},body:JSON.stringify({statements:r})})).json();if(!n.data||!Array.isArray(n.data))return n.error=y(["detail"],n,"post query"),{error:_nullishCoalesce(n.error, () => (JSON.stringify(n)))};if(n.data[0].error)return{error:{message:n.data[0].error,operation:"post query"}};if(s){let o={...n,data:_optionalChain([n, 'optionalAccess', _2 => _2.data, 'optionalAccess', _3 => _3.map, 'call', _4 => _4(i=>({...i,results:{...i.results,rows:d(i.results.rows,10)}}))])};console.log("Response Query:",JSON.stringify(o))}return{state:n.state,data:n.data}}catch(t){throw s&&console.error("Error querying EdgeDB:",t),new Error(_optionalChain([t, 'optionalAccess', _5 => _5.message]))}};var g=async(a,e,r)=>{try{let s=new URL(A);e&&Object.entries(e).forEach(([o,i])=>{i!==void 0&&s.searchParams.append(o,i.toString())});let n=await(await fetch(_optionalChain([s, 'optionalAccess', _6 => _6.toString, 'call', _7 => _7()]),{method:"GET",headers:{Authorization:`Token ${a}`}})).json();if(!n.results)return n.error=y(["detail"],n,"get databases"),{error:_nullishCoalesce(n.error, () => (JSON.stringify(n)))};if(r){let o={...n,results:d(n.results,10)};console.log("Response Databases:",JSON.stringify(o))}return{links:_optionalChain([n, 'optionalAccess', _8 => _8.links]),count:n.count,results:n.results.map(o=>({clientId:o.client_id,createdAt:o.created_at,deletedAt:o.deleted_at,id:o.id,isActive:o.is_active,name:o.name,status:o.status,updatedAt:o.updated_at}))}}catch(s){throw r&&console.error("Error getting all EdgeDBs:",s),s}};var f=({results:a})=>{let e=[];if(a instanceof Array){if(a.length===0)return{results:[]};let r=null;e=_optionalChain([a, 'optionalAccess', _9 => _9.map, 'call', _10 => _10(s=>(_optionalChain([s, 'optionalAccess', _11 => _11.rows])&&(r=s.rows.map(t=>{let n={};return _optionalChain([s, 'optionalAccess', _12 => _12.columns])&&s.columns.forEach((o,i)=>{n[o]=t[i]}),n})),{statement:s.statement,rows:r}))])}return{results:e}};var R=()=>_optionalChain([globalThis, 'access', _13 => _13.Azion, 'optionalAccess', _14 => _14.Sql])||null,D= (_class =class{__init() {this.database=null}constructor(){;_class.prototype.__init.call(this);_class.prototype.__init2.call(this);_class.prototype.__init3.call(this);this.database=_optionalChain([R, 'call', _31 => _31(), 'optionalAccess', _32 => _32.Database])||null}__init2() {this.mapperQuery=async e=>{let r=[];for(let s of e){let t=s.result.columnCount();if(t===0)continue;let n=[];for(let c=0;c<t;c++)n.push(s.result.columnName(c));let o=await s.result.next(),i=[];for(;o;){let c=[];for(let p=0;p<t;p++)c.push(o.getValue(p));i.push(c),o=await s.result.next()}r.push({statement:_optionalChain([s, 'optionalAccess', _33 => _33.statement, 'optionalAccess', _34 => _34.split, 'call', _35 => _35(" "), 'access', _36 => _36[0]]),columns:n,rows:i})}return Promise.resolve(r)}}__init3() {this.query=async(e,r,s)=>{if(_optionalChain([this, 'access', _37 => _37.database, 'optionalAccess', _38 => _38.open])){let t=await _optionalChain([this, 'access', _39 => _39.database, 'optionalAccess', _40 => _40.open, 'call', _41 => _41(e)]),n=r.map(async o=>{let i=await _optionalChain([t, 'optionalAccess', _42 => _42.query, 'call', _43 => _43(o)]);return{statement:o,result:i}});try{let o=await Promise.all(n);if(o.every(i=>_optionalChain([i, 'access', _44 => _44.result, 'optionalAccess', _45 => _45.columnCount, 'call', _46 => _46()])>0))return o}catch(o){throw _optionalChain([s, 'optionalAccess', _47 => _47.debug])&&console.error("Error querying:",_optionalChain([o, 'optionalAccess', _48 => _48.message])),o}}return[]}}}, _class);var h=async(a,e,r,s)=>{let t=await g(a,{search:e},_optionalChain([s, 'optionalAccess', _49 => _49.debug]));if(_optionalChain([t, 'optionalAccess', _50 => _50.error]))return{error:_optionalChain([t, 'optionalAccess', _51 => _51.error])};let n=_optionalChain([t, 'optionalAccess', _52 => _52.results]);if(!n||n.length===0)return{error:{message:`Database ${e} not found`,operation:"apiQuery"}};let o=n[0];if(!_optionalChain([o, 'optionalAccess', _53 => _53.id]))return{error:{message:`Database ${e} not found`,operation:"apiQuery"}};let{state:i,data:c,error:p}=await T(a,o.id,r,_optionalChain([s, 'optionalAccess', _54 => _54.debug]));if(c&&c.length>0){let E={state:i,results:c.map((b,N)=>({statement:_optionalChain([r, 'access', _55 => _55[N], 'optionalAccess', _56 => _56.split, 'call', _57 => _57(" "), 'access', _58 => _58[0]]),columns:_optionalChain([b, 'optionalAccess', _59 => _59.results, 'optionalAccess', _60 => _60.columns])&&_optionalChain([b, 'optionalAccess', _61 => _61.results, 'optionalAccess', _62 => _62.columns, 'access', _63 => _63.length])>0?_optionalChain([b, 'optionalAccess', _64 => _64.results, 'optionalAccess', _65 => _65.columns]):void 0,rows:_optionalChain([b, 'optionalAccess', _66 => _66.results, 'optionalAccess', _67 => _67.rows])&&_optionalChain([b, 'optionalAccess', _68 => _68.results, 'optionalAccess', _69 => _69.rows, 'access', _70 => _70.length])>0?_optionalChain([b, 'optionalAccess', _71 => _71.results, 'optionalAccess', _72 => _72.rows]):void 0})),toObject:()=>f(E)};return{data:E}}return{error:p}},Q=async(a,e,r,s)=>{try{let t=new D,n=await t.query(e,r,s),o={results:[],toObject:()=>null},i=await t.mapperQuery(n);if(i&&i.length>0&&(o.state="executed-runtime",o.results=i),_optionalChain([s, 'optionalAccess', _73 => _73.debug])){let c={...o,results:o.results.map(p=>({...p,rows:d(_optionalChain([p, 'optionalAccess', _74 => _74.rows])||[],10)}))};console.log("Response Query:",JSON.stringify(c))}return{data:{...o,toObject:()=>f(o)}}}catch(t){return{error:{message:_optionalChain([t, 'optionalAccess', _75 => _75.message])||"Error executing query",operation:"executing query"}}}};var $=process.env.AZION_DEBUG&&process.env.AZION_DEBUG==="true",l=a=>_nullishCoalesce(_nullishCoalesce(a, () => (process.env.AZION_TOKEN)), () => ("")),u=a=>_nullishCoalesce(a, () => (!!$)),P=async(a,e,r)=>{let s=await O(l(a),e,u(_optionalChain([r, 'optionalAccess', _76 => _76.debug])));return s.data?{data:{state:s.state,...s.data,query:t=>m(l(a),e,t,{...r,debug:u(_optionalChain([r, 'optionalAccess', _77 => _77.debug]))}),execute:(t,n)=>z(l(a),e,t,{...n,debug:u(_optionalChain([n, 'optionalAccess', _78 => _78.debug]))}),getTables:t=>w(e,{...t,debug:u(_optionalChain([t, 'optionalAccess', _79 => _79.debug]))})}}:{error:s.error}},x=async(a,e,r)=>{let s=await C(l(a),e,u(_optionalChain([r, 'optionalAccess', _80 => _80.debug])));return _optionalChain([s, 'optionalAccess', _81 => _81.data])?{data:{state:_nullishCoalesce(s.state, () => ("executed")),id:s.data.id}}:{error:s.error}},S=async(a,e,r)=>{if(!e||e==="")return{error:{message:"Database name is required",operation:"get database"}};let s=await g(l(a),{search:e},u(_optionalChain([r, 'optionalAccess', _82 => _82.debug])));if(!_optionalChain([s, 'optionalAccess', _83 => _83.results])||_optionalChain([s, 'optionalAccess', _84 => _84.results, 'optionalAccess', _85 => _85.length])===0)return{error:{message:`Database with name '${e}' not found`,operation:"get database"}};let t=_optionalChain([s, 'optionalAccess', _86 => _86.results, 'access', _87 => _87[0]]);return!t||t.id===void 0||t.name!==e?{error:{message:`Database with name '${e}' not found`,operation:"get database"}}:{data:{...t,query:n=>m(l(a),t.name,n,{...r,debug:u(_optionalChain([r, 'optionalAccess', _88 => _88.debug]))}),execute:(n,o)=>z(l(a),t.name,n,{...o,debug:u(_optionalChain([o, 'optionalAccess', _89 => _89.debug]))}),getTables:n=>w(t.name,{...n,debug:u(_optionalChain([n, 'optionalAccess', _90 => _90.debug]))})}}},q=async(a,e,r)=>{let s=await g(l(a),e,u(_optionalChain([r, 'optionalAccess', _91 => _91.debug])));if(_optionalChain([s, 'optionalAccess', _92 => _92.results])&&s.results.length>0){let t=s.results.map(n=>({...n,query:o=>m(l(a),n.name,o,{...r,debug:u(_optionalChain([r, 'optionalAccess', _93 => _93.debug]))}),execute:(o,i)=>z(l(a),n.name,o,{...i,debug:u(_optionalChain([i, 'optionalAccess', _94 => _94.debug]))}),getTables:o=>w(n.name,{...o,debug:u(_optionalChain([o, 'optionalAccess', _95 => _95.debug]))})}));return{data:{count:s.count,databases:t}}}return{error:s.error}},m=async(a,e,r,s)=>{if(!e||e==="")return{error:{message:"Database name is required",operation:"query database"}};if(_optionalChain([s, 'optionalAccess', _96 => _96.debug])&&console.log(`Executing statements on database ${e}: ${r}`),!Array.isArray(r)||r.length===0)return{error:{message:'No statements to execute. Please provide at least one statement. e.g ["SELECT * FROM users"]',operation:"query database"}};if(!r.some(n=>["SELECT","PRAGMA"].some(o=>n.trim().toUpperCase().startsWith(o))))throw new Error("Only read statements are allowed");return R()?Q(l(a),e,r,{...s,debug:u(_optionalChain([s, 'optionalAccess', _97 => _97.debug]))}):h(l(a),e,r,{...s,debug:u(_optionalChain([s, 'optionalAccess', _98 => _98.debug]))})},z=async(a,e,r,s)=>{if(_optionalChain([s, 'optionalAccess', _99 => _99.debug])&&console.log(`Executing statements on database ${e}: ${r}`),!e||e==="")return{error:{message:"Database name is required",operation:"execute database"}};if(!Array.isArray(r)||r.length===0)return{error:{message:`No statements to execute. Please provide at least one statement. e.g ["INSERT INTO users (name) VALUES ('John')"]`,operation:"execute database"}};let t=r.some(i=>["INSERT","UPDATE","DELETE"].some(c=>i.trim().toUpperCase().startsWith(c))),n=r.some(i=>["CREATE","ALTER","DROP","TRUNCATE"].some(c=>i.trim().toUpperCase().startsWith(c)));return!n&&!t?{error:{message:"Only write statements are allowed",operation:"execute database"}}:n&&_optionalChain([s, 'optionalAccess', _100 => _100.force])===!1?{error:{message:"To admin statements, you need to set the force option to true",operation:"execute database"}}:{data:(await h(a,e,r,s)).data}},F= exports.createDatabase =async(a,e)=>await P(l(),a,{...e,debug:u(_optionalChain([e, 'optionalAccess', _101 => _101.debug]))}),K= exports.deleteDatabase =(a,e)=>x(l(),a,{...e,debug:u(_optionalChain([e, 'optionalAccess', _102 => _102.debug]))}),H= exports.getDatabase =async(a,e)=>S(l(),a,{...e,debug:u(_optionalChain([e, 'optionalAccess', _103 => _103.debug]))}),X= exports.getDatabases =(a,e)=>q(l(),a,{...e,debug:u(_optionalChain([e, 'optionalAccess', _104 => _104.debug]))}),w= exports.getTables =async(a,e)=>m(l(),a,["PRAGMA table_list"],{...e,debug:u(_optionalChain([e, 'optionalAccess', _105 => _105.debug]))}),Y= exports.useQuery =(a,e,r)=>m(l(),a,e,{...r,debug:u(_optionalChain([r, 'optionalAccess', _106 => _106.debug]))}),ee= exports.useExecute =async(a,e,r)=>z(l(),a,e,{...r,debug:u(_optionalChain([r, 'optionalAccess', _107 => _107.debug]))}),v= exports.createClient =a=>{let e=l(_optionalChain([a, 'optionalAccess', _108 => _108.token])),r=u(_optionalChain([a, 'optionalAccess', _109 => _109.options, 'optionalAccess', _110 => _110.debug]));return{createDatabase:t=>P(e,t,{...a,debug:r}),deleteDatabase:t=>x(e,t,{...a,debug:r}),getDatabase:t=>S(e,t,{...a,debug:r}),getDatabases:t=>q(e,t,{...a,debug:r})}};var te=v;exports.createClient = v; exports.createDatabase = F; exports.default = te; exports.deleteDatabase = K; exports.getDatabase = H; exports.getDatabases = X; exports.getTables = w; exports.useExecute = ee; exports.useQuery = Y;
